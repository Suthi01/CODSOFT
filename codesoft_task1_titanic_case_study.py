# -*- coding: utf-8 -*-
"""Codesoft task1 titanic case study

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Suthi01/3aa78cbcc443c40d4a8f8521f5a736fc/copy-of-untitled1.ipynb
"""

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from matplotlib import style
from sklearn import linear_model
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import Perceptron
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC, LinearSVC
from sklearn.naive_bayes import GaussianNB

test_df =pd.read_csv("/content/Titanic-Dataset 1.csv")
train_df = pd.read_csv("/content/Titanic-Dataset 1.csv")
test_df.head()

train_df.head()

train_df.info()

train_df.describe()

train_df.shape

train_df.isnull() .sum()

train_df.head()

train_df["Age"].fillna(train_df["Age"].mean(), inplace=True)
train_df.describe()

train_df["Embarked"].fillna(train_df["Embarked"].mode()[0], inplace=True)
train_df.isnull().sum()

"""**Data Visualisation:**"""

f, A = plt.subplots(1, 2,figsize=(12, 4))
train_df['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=A[0], shadow=False)
A[0].set_title('Survivors (1) and the dead (0)')
A[0].set_ylabel('')
sns.countplot(x='Survived', data=train_df, ax=A[1])
A[1].set_ylabel('Quantity')
A[1].set_title('Survivous (1) and te dead (0)')
plt.show()

f, A = plt.subplots(1,2, figsize=(12, 4))
train_df[['Sex', 'Survived']].groupby(['Sex']) .mean().plot.bar(ax=A[0])
A[0].set_title('Survivors by sex')
sns.countplot(x='Sex', hue='Survived', data=train_df, ax=A[1])
A[1].set_ylabel('Quantity')
A[1].set_title('Survived (1) and deceased (0): men nd women')
plt.show()

train_df['Pclass'] = train_df['Pclass'].astype('int')

sns.barplot(x='Pclass', y='Survived', data=train_df)

grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', aspect=1.6)
grid.map(plt.hist, 'Age', alpha=.5, bins=20)
grid.add_legend();

import altair as alt
axes = alt.Chart(train_df).mark_bar().encode(
    x='relatives',
    y='Survived',
    color='Survived'
).properties(width=600, height=300)

data = [train_df, test_df]
for dataset in data:
    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']
    dataset.loc[dataset['relatives'] > 0, 'not_alone'] = 0
    dataset.loc[dataset['relatives'] == 0, 'not_alone'] = 1
    dataset['not_alone'] = dataset['not_alone'].astype(int)
train_df['not_alone'].value_counts()

"""**Data Processing**

**Age**
"""

data = [train_df, test_df]

for dataset in data:
    mean = train_df["Age"].mean()
    std = test_df["Age"].std()
    is_null = dataset["Age"].isnull().sum()
    # compute random numbers between the mean, std and is_null
    rand_age = np.random.randint(mean - std, mean + std, size = is_null)
    # fill NaN values in Age column with random values generated
    age_slice = dataset["Age"].copy()
    age_slice[np.isnan(age_slice)] = rand_age
    dataset["Age"] = age_slice
    dataset["Age"] = train_df["Age"].astype(int)
train_df["Age"].isnull().sum()

"""**Embarked**"""

train_df['Embarked'].describe()

common_value = 'S'
data = [train_df, test_df]

for dataset in data:
    dataset['Embarked'] = dataset['Embarked'].fillna(common_value)

"""**Fare:**"""

data = [train_df, test_df]

for dataset in data:
    dataset['Fare'] = dataset['Fare'].fillna(0)
    dataset['Fare'] = dataset['Fare'].astype(int)

"""**Sex:**"""

genders = {"male": 0, "female": 1}
data = [train_df, test_df]

for dataset in data:
    dataset['Sex'] = dataset['Sex'].map(genders)

"""**Tickets:**"""

train_df['Ticket'].describe()

"""**Embarked feature into Numeric:**"""

ports = {"S": 0, "C": 1, "Q": 2}
data = [train_df, test_df]

for dataset in data:
    dataset['Embarked'] = dataset['Embarked'].map(ports)

"""**Creating Categoriese:**

**Age:**
"""

data = [train_df, test_df]
for dataset in data:
    dataset['Age'] = dataset['Age'].astype(int)
    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0
    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1
    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2
    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3
    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4
    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5
    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6
    dataset.loc[ dataset['Age'] > 66, 'Age'] = 6

# let's see how it's distributed train_df['Age'].value_counts()

"""*Fare:*"""

train_df.head(10)

data = [train_df, test_df]

for dataset in data:
    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0
    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1
    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2
    dataset.loc[(dataset['Fare'] > 31) & (dataset['Fare'] <= 99), 'Fare']   = 3
    dataset.loc[(dataset['Fare'] > 99) & (dataset['Fare'] <= 250), 'Fare']   = 4
    dataset.loc[ dataset['Fare'] > 250, 'Fare'] = 5
    dataset['Fare'] = dataset['Fare'].astype(int)

"""**Creating ne features:**

**--> Age time classs:**
"""

data = [train_df, test_df]
for dataset in data:
    dataset['Age_Class']= dataset['Age']* dataset['Pclass']

"""**--> Fare per person:**"""

for dataset in data:
    dataset['Fare_Per_Person'] = dataset['Fare']/(dataset['relatives']+1)
    dataset['Fare_Per_Person'] = dataset['Fare_Per_Person'].astype(int)
# Let's take a last look at the training set, before we start training the models.
train_df.head(10)

"""**Cecking Numerical Attributes**"""

sns.distplot(train_df['Age'])

sns.distplot(train_df['Fare'])

"""**Map to check correlation:**"""

corr = train_df.corr()
plt.figure(figsize=(15, 9))
sns.heatmap(corr, annot=True, cmap='coolwarm')

train_df.head()

"""**Label Encoding**"""

train_df["Sex"].value_counts()

train_df['Embarked'].value_counts()

from sklearn.preprocessing import LabelEncoder
cols = ['Sex', 'Embarked']
le = LabelEncoder()

for col in cols:
    train_df[col] = le.fit_transform(train_df[col])
train_df.head()

"""**Test_Split**"""

X = train_df.drop(columns = ['PassengerId','Survived'],axis=1)
Y = train_df['Survived']

print(X)

print(Y)

import sklearn.model_selection
X_train, X_test, Y_train, Y_test = sklearn.model_selection.train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""**Training the Model:**"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
model = LogisticRegression()
train_df.info()

train_df = train_df.fillna(0)
train_df['Age'] = train_df['Age'].astype('int')
train_df['Fare'] = train_df['Fare'].astype('int')

train_df.astype({'Age':'int','Fare':'int'}).dtypes

train_df.drop("Name", axis=1, inplace=True)

Y_train = Y_train.astype(float)
#training the Logistic Regression model with training data

train_df.drop("Cabin", axis=1, inplace=True)

train_df.columns = ['Age_Class', 'Cabin', 'Fare_Per_Person', 'Title', 'not_alone', 'Parch', 'SibSp', 'Sex', 'PassengerId', 'Survived']

Y_train = pd.to_numeric(Y_train)

X_train_prediction = model.predict(X_train)
print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy_score_of_training_data : ', training_data_accuracy)

X_test_prediction = model.predict(X_test)
print(X_test_prediction)

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy_score_of_test data : ', test_data_accuracy)